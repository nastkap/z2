name: GHAction example

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-scan:
    name: Build, scan, and push Docker image to GHCR
    runs-on: ubuntu-latest

    steps:
      - name: Check out the source code
        uses: actions/checkout@v2
      
      - name: Docker metadata definitions
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/example
          flavor: latest=false
          tags: |
            type=sha,priority=100,prefix=sha-,format=short
            type=semver,priority=200,pattern={{version}}  

      - name: QEMU set-up
        uses: docker/setup-qemu-action@v3

      - name: Buildx set-up
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: false
          cache-from: |
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/example:cache
          cache-to: |
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/example:cache
          tags: ${{ steps.meta.outputs.tags }}

      - name: Analyze for critical and high CVEs
        id: docker-scout-cves
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ secrets.DOCKERHUB_USERNAME }}/example
          sarif-file: sarif.output.json
          summary: true
      
      - name: Upload SARIF result
        id: upload-sarif
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: sarif.output.json

      - name: Check vulnerability scan results
        run: |
          CRITICAL_COUNT=$(jq '.runs[].results | map(select(.ruleId | contains("CRITICAL"))) | length' sarif.output.json)
          HIGH_COUNT=$(jq '.runs[].results | map(select(.ruleId | contains("HIGH"))) | length' sarif.output.json)
          if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ]; then
            echo "Critical or High vulnerabilities found. Failing the job."
            exit 1
          fi

      - name: Push Docker image to GHCR
        if: success()
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          cache-from: |
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/example:cache
          cache-to: |
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/example:cache
          tags: ${{ steps.meta.outputs.tags }}

            type=registry,ref=${{ vars.DOCKERHUB_USERNAME }}/example:cache
          tags: ${{ steps.meta.outputs.tags }}

